###
# Copyright DataStax, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###


---
#########################
# Update Pulsar cluster configurations for all server components
# - backup existing configurations
# - update with new configurations
# - rolling restart the cluster
#
# It only does cluster rolling restart if "restart_only" is true
# -----------------------


#########################
# PreWork before updating the configurations
# -----------------------
- hosts: pulsarClient
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  roles: 
    # Set global variables to be used in other tasks/roles
    # - Not needed for restart only
    - { role: pulsar/common/pulsar_setGlobalVars, varList: 'all' }

- hosts: pulsarServer
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  roles: 
    # Set Pulsar server log immediate_flush behavior
    - { role: pulsar/common/pulsar_immediateLogFlush, 
        when: srv_select_criteria and (with_cfg_upd is defined and with_cfg_upd|bool) }


#########################
# Rolling restart the Pulsar cluster with the following sequence
# - Dedicated functions worker
# - Dedicated autorecovery nodes
# - Broker
# - Bookkeeper
# - Zookeeper
# -----------------------
# Update and restart dedicated function brokers
- hosts: functions_worker
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  serial: "{{ srv_restart_parallelism|default(1) }}"
  vars:
    hostNameStr2: "{{ private_ip | replace('.', '-') }}"
    srvStarted: true
    srv_key_name: "{{ srv_component }}.{{ hostNameStr2 }}.key-pk8.pem"
    srv_cert_name: "{{ srv_component }}.{{ hostNameStr2 }}.crt.pem"
    srv_ports: [
      "{% if enable_fwrkr_tls|bool %}{{ funcs_worker_port_tls }}{% else %}{{ funcs_worker_port }}{% endif %}"
    ]
    bkup_subfolder_name: "ConfigUpdate-{{ ansible_date_time.epoch }}"
  roles:
    # Check the current status of function workers
    - { role: misc/_check_svc_status,
        when: srv_select_criteria and deploy_functions_worker=='dedicated' }
    # Stop function workers
    - { role: pulsar/common/pulsar_stopSvc, 
        when: srv_select_criteria and deploy_functions_worker=='dedicated' }
    # Backup existing configuration files 
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'config_update',
        when: srv_select_criteria and deploy_functions_worker=='dedicated' and 
              (with_cfg_upd is defined and with_cfg_upd|bool)  }
    # Update configuration files
    - { role: pulsar/functions_worker/fwrkr_config,
        when: srv_select_criteria and deploy_functions_worker=='dedicated' and 
              (with_cfg_upd is defined and with_cfg_upd|bool) }
    # Start function workers
    - { role: pulsar/common/pulsar_startSvc,  
        srvStarted: false, 
        srv_options: "{{ funcs_worker_jvm_options|trim|replace('\n',' ') }}",
        when: srv_select_criteria and deploy_functions_worker=='dedicated' }

# Update and restart dedicated autorecovery nodes
- hosts: autorecovery
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  serial: "{{ srv_restart_parallelism|default(1) }}"
  vars:
    srvStarted: true
    srv_ports: ["{{ autorecovery_stats_port }}"]
    bkup_subfolder_name: "ConfigUpdate-{{ ansible_date_time.epoch }}"
  roles:
    # Check the current status of function workers
    - { role: misc/_check_svc_status,
        when: srv_select_criteria and autorecovery_option=='dedicated' }
    # Stop function workers
    - { role: pulsar/common/pulsar_stopSvc, 
        when: srv_select_criteria and autorecovery_option=='dedicated' }
    # Backup existing configuration files 
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'config_update',
        when: srv_select_criteria and autorecovery_option=='dedicated' and 
              (with_cfg_upd is defined and with_cfg_upd|bool)  }
    # Update configuration files
    - { role: pulsar/autorecovery/ar_config,
        when: srv_select_criteria and autorecovery_option=='dedicated' and 
              (with_cfg_upd is defined and with_cfg_upd|bool) }
    # Start dediated autorecovery
    - { role: pulsar/common/pulsar_startSvc,  
        srvStarted: false, 
        srv_options: "{{ autorecovery_jvm_options|trim|replace('\n',' ') }}",
        when: srv_select_criteria and autorecovery_option=='dedicated' }

# Update and restart brokers
- hosts: broker
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  serial: "{{ srv_restart_parallelism|default(1) }}"
  vars:
    hostNameStr2: "{{ private_ip | replace('.', '-') }}"
    srvStarted: true
    srv_key_name: "{{ srv_component }}.{{ hostNameStr2 }}.key-pk8.pem"
    srv_cert_name: "{{ srv_component }}.{{ hostNameStr2 }}.crt.pem"
    srv_ports: [
        "{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}{{ web_svc_port_tls }}{% else %}{{ web_svc_port }}{% endif %}",
        "{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}{{ broker_svc_port_tls }}{% else %}{{ broker_svc_port }}{% endif %}"
      ]
    bkup_subfolder_name: "ConfigUpdate-{{ ansible_date_time.epoch }}"
  roles:
    # Check the current status of brokers
    - { role: misc/_check_svc_status, when: srv_select_criteria }
    # Stop brokers
    - { role: pulsar/common/pulsar_stopSvc, when: srv_select_criteria }
    # Backup existing configuration files 
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'config_update',
        when: srv_select_criteria and (with_cfg_upd is defined and with_cfg_upd|bool) }
    # Update configuration files
    - { role: pulsar/broker/brkr_config, 
        when: srv_select_criteria and (with_cfg_upd is defined and with_cfg_upd|bool) }
    # Start brokers
    - { role: pulsar/common/pulsar_startSvc, srvStarted: false, srv_options: "{{ broker_jvm_options|trim|replace('\n',' ') }}",
        when: srv_select_criteria }

# Update and restart bookkeeper
- hosts: bookkeeper
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  serial: "{{ srv_restart_parallelism|default(1) }}"
  vars:
    srvStarted: true
    srv_component: 'bookkeeper'
    srv_component_internal: 'bookie'
    srv_ports: ["{{ bookie_listening_port }}"]
    bkup_subfolder_name: "ConfigUpdate-{{ ansible_date_time.epoch }}"
  roles:
    # Check the current status of bookies
    - { role: misc/_check_svc_status, when: srv_select_criteria }
    # Stop bookies
    - { role: pulsar/common/pulsar_stopSvc, when: srv_select_criteria }
    # Backup existing configuration files 
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'config_update',
        when: srv_select_criteria and (with_cfg_upd is defined and with_cfg_upd|bool) }
    # Update configuration files
    - { role: pulsar/bookie/bkie_config, 
        when: srv_select_criteria and (with_cfg_upd is defined and with_cfg_upd|bool) }
    # Start bookies
    - { role: pulsar/common/pulsar_startSvc, srvStarted: false, srv_options: "{{ bookie_jvm_options|trim|replace('\n',' ') }}", 
        when: srv_select_criteria }

# Update and restart bookkeeper 
- hosts: zookeeper
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  serial: "{{ srv_restart_parallelism|default(1) }}"
  vars:
    srvStarted: true
    srv_ports: ["{{ zk_clnt_port }}"]
    bkup_subfolder_name: "ConfigUpdate-{{ ansible_date_time.epoch }}"
  roles:
    # Check the current status of zookeepers
    - { role: misc/_check_svc_status, 
        when: srv_select_criteria }
    # Stop zookeepers
    - { role: pulsar/common/pulsar_stopSvc, 
        when: srv_select_criteria }
    # Backup existing configuration files 
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'config_update',
        when: srv_select_criteria and (with_cfg_upd is defined and with_cfg_upd|bool) }
    # Update configuration files
    - { role: pulsar/zookeeper/zkpr_config,
        when: srv_select_criteria and (with_cfg_upd is defined and with_cfg_upd|bool) }
    # Start zookeepers
    - { role: pulsar/common/pulsar_startSvc, srvStarted: false, srv_options: "{{ zk_jvm_options|trim|replace('\n',' ') }}", 
        when: srv_select_criteria }


#########################
# Configure Pular clients
# -----------------------
# - 
- hosts: pulsarClient
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  roles:
    # Config Pulsar client (client.conf)
    - { role: pulsar/client/clnt_config,
        when: srv_select_criteria and (with_cfg_upd is defined and with_cfg_upd|bool) }